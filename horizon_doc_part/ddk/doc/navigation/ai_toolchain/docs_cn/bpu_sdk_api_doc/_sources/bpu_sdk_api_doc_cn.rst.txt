概述
=======

本文档主要介绍了地平线天工开物工具链Runtime的API、数据、结构体、排布及对齐规则等。
通过阅读本文档，用户可以在Horizon开发板上利用API完成模型的加载与释放，模型信息的获取，以及模型的推理等操作。

数据类型和数据结构
===================

版本信息类
-----------------

.. note::

  注意，本小节中的版本信息类型的版本号随版本变化有所不同，此处的版本号仅供参考，实际版本请以您获取到的发布物为准。


``HB_DNN_VERSION_MAJOR``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cpp

    #define HB_DNN_VERSION_MAJOR 1U

DNN主版本号信息。

``HB_DNN_VERSION_MINOR``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cpp

    #define HB_DNN_VERSION_MINOR 1U

DNN次版本号信息。

``HB_DNN_VERSION_PATCH``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cpp

    #define HB_DNN_VERSION_PATCH 0U

DNN补丁版本号信息。

模型类
--------

``HB_DNN_TENSOR_MAX_DIMENSIONS``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cpp

    #define HB_DNN_TENSOR_MAX_DIMENSIONS 8

张量最大的维度设置为 ``8``。

``HB_DNN_INITIALIZE_INFER_CTRL_PARAM``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cpp

    #define HB_DNN_INITIALIZE_INFER_CTRL_PARAM(param) \
    {                                                  \
        (param)->bpuCoreId = HB_BPU_CORE_ANY;         \
        (param)->dspCoreId = HB_DSP_CORE_ANY;         \
        (param)->priority = HB_DNN_PRIORITY_LOWEST;   \
        (param)->reserved1 = 0;                        \
        (param)->reserved2 = 0;                        \
        (param)->reserved3 = 0;                        \
        (param)->reserved4 = 0;                        \
        (param)->more = false;                         \
    }

初始化控制参数。

``hbPackedDNNHandle_t``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cpp

    typedef void *hbPackedDNNHandle_t;

DNN句柄，指向打包的多个模型。

``hbDNNHandle_t``
^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cpp

    typedef void *hbDNNHandle_t;

DNN句柄，指向单一模型。

``hbDNNTaskHandle_t``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cpp

    typedef void *hbDNNTaskHandle_t;

任务句柄，指向一个任务。

``hbDNNTensorLayout``
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cpp

    typedef enum {
      HB_DNN_LAYOUT_NHWC = 0,
      HB_DNN_LAYOUT_NCHW = 2,
      HB_DNN_LAYOUT_NONE = 255,
    } hbDNNTensorLayout;

张量的排布形式。``NHWC`` 分别代表Number、Height、Width和Channel。 

+ 成员

  .. table::
    :align: center

    +------------------------+-----------------------+
    | **成员名称**           | **描述**              |
    +------------------------+-----------------------+
    | ``HB_DNN_LAYOUT_NONE`` | 没有定义排布形式。    |
    +------------------------+-----------------------+
    | ``HB_DNN_LAYOUT_NHWC`` | 排布形式为 ``NHWC``。 |
    +------------------------+-----------------------+
    | ``HB_DNN_LAYOUT_NCHW`` | 排布形式为 ``NCHW``。 |
    +------------------------+-----------------------+

``hbDNNDataType``
^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cpp

  typedef enum {
    HB_DNN_IMG_TYPE_Y,
    HB_DNN_IMG_TYPE_NV12,
    HB_DNN_IMG_TYPE_NV12_SEPARATE,
    HB_DNN_IMG_TYPE_YUV444,
    HB_DNN_IMG_TYPE_RGB,
    HB_DNN_IMG_TYPE_BGR,
    HB_DNN_TENSOR_TYPE_S4,
    HB_DNN_TENSOR_TYPE_U4,
    HB_DNN_TENSOR_TYPE_S8,
    HB_DNN_TENSOR_TYPE_U8,
    HB_DNN_TENSOR_TYPE_F16,
    HB_DNN_TENSOR_TYPE_S16,
    HB_DNN_TENSOR_TYPE_U16,
    HB_DNN_TENSOR_TYPE_F32,
    HB_DNN_TENSOR_TYPE_S32,
    HB_DNN_TENSOR_TYPE_U32,
    HB_DNN_TENSOR_TYPE_F64,
    HB_DNN_TENSOR_TYPE_S64,
    HB_DNN_TENSOR_TYPE_U64,
    HB_DNN_TENSOR_TYPE_MAX
  } hbDNNDataType;

张量的类型。``S`` 代表有符号，``U`` 代表无符号，``F`` 代表浮点型，后面的数字代表bit数。

+ 成员

  .. table::
    :align: center

    +-----------------------------------+---------------------------------------+
    | **成员名称**                      | **描述**                              |
    +-----------------------------------+---------------------------------------+
    | ``HB_DNN_IMG_TYPE_Y``             | 张量类型为仅有Y通道的图片。           |
    +-----------------------------------+---------------------------------------+
    | ``HB_DNN_TENSOR_TYPE_NV12``       | 张量类型为一张NV12的图片。            |
    +-----------------------------------+---------------------------------------+
    | ``HB_DNN_IMG_TYPE_NV12_SEPARATE`` | 张量类型为Y通道及UV通道为输入的图片。 |
    +-----------------------------------+---------------------------------------+
    | ``HB_DNN_IMG_TYPE_YUV444``        | 张量类型为YUV444为输入的图片。        |
    +-----------------------------------+---------------------------------------+
    | ``HB_DNN_IMG_TYPE_RGB``           | 张量类型为RGB为输入的图片。           |
    +-----------------------------------+---------------------------------------+
    | ``HB_DNN_IMG_TYPE_BGR``           | 张量类型为BGR为输入的图片。           |
    +-----------------------------------+---------------------------------------+
    | ``HB_DNN_TENSOR_TYPE_S4``         | 张量类型为有符号4bit。                |
    +-----------------------------------+---------------------------------------+
    | ``HB_DNN_TENSOR_TYPE_U4``         | 张量类型为无符号4bit。                |
    +-----------------------------------+---------------------------------------+
    | ``HB_DNN_TENSOR_TYPE_S8``         | 张量类型为有符号8bit。                |
    +-----------------------------------+---------------------------------------+
    | ``HB_DNN_TENSOR_TYPE_U8``         | 张量类型为无符号8bit。                |
    +-----------------------------------+---------------------------------------+
    | ``HB_DNN_TENSOR_TYPE_F16``        | 张量类型为浮点型16bit。               |
    +-----------------------------------+---------------------------------------+
    | ``HB_DNN_TENSOR_TYPE_S16``        | 张量类型为有符号16bit。               |
    +-----------------------------------+---------------------------------------+
    | ``HB_DNN_TENSOR_TYPE_U16``        | 张量类型为无符号16bit。               |
    +-----------------------------------+---------------------------------------+
    | ``HB_DNN_TENSOR_TYPE_F32``        | 张量类型为浮点型32bit。               |
    +-----------------------------------+---------------------------------------+
    | ``HB_DNN_TENSOR_TYPE_S32``        | 张量类型为有符号32bit。               |
    +-----------------------------------+---------------------------------------+
    | ``HB_DNN_TENSOR_TYPE_U32``        | 张量类型为无符号32bit。               |
    +-----------------------------------+---------------------------------------+
    | ``HB_DNN_TENSOR_TYPE_F64``        | 张量类型为浮点型64bit。               |
    +-----------------------------------+---------------------------------------+
    | ``HB_DNN_TENSOR_TYPE_S64``        | 张量类型为有符号64bit。               |
    +-----------------------------------+---------------------------------------+
    | ``HB_DNN_TENSOR_TYPE_U64``        | 张量类型为无符号64bit。               |
    +-----------------------------------+---------------------------------------+
    | ``HB_DNN_TENSOR_TYPE_MAX``        | 代表最大的张量类型编号。              |
    +-----------------------------------+---------------------------------------+

``hbDNNTensorShape``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cpp

  typedef struct {
    int32_t dimensionSize[HB_DNN_TENSOR_MAX_DIMENSIONS];
    int32_t numDimensions;
  } hbDNNTensorShape;

张量的形状。例如一张224x224的bgr彩色空间的图片 ``numDimensions=4``，若排布形式为NHWC，
则 ``dimensionSize`` 数组中按顺序存储图片 ``Number=1``、``Height=224``、``Width=224``、``Channel=3``。

+ 成员

  .. table::
    :align: center

    +-------------------+----------------------+
    |    **成员名称**   |       **描述**       |
    +-------------------+----------------------+
    | ``dimensionSize`` | 张量每个维度的大小。 |
    +-------------------+----------------------+
    | ``numDimensions`` |     张量的维度。     |
    +-------------------+----------------------+

``hbDNNQuantiShift``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cpp

  typedef struct {
    int32_t shiftLen;
    uint8_t *shiftData;
  } hbDNNQuantiShift;

量化推理结果的移位数据，用于处理qat模型推理结果。例如量化推理结果data[i]对应的移位数据为shift[i]，
则对应的浮点推理结果为 :math:`data[i] / (1 << shift[i])`。

+ 成员

  .. table::
    :align: center

    +---------------+--------------------+
    | **成员名称**  | **描述**           |
    +---------------+--------------------+
    | ``shiftLen``  | 移位数据的长度。   |
    +---------------+--------------------+
    | ``shiftData`` | 移位数据的首地址。 |
    +---------------+--------------------+

``hbDNNQuantiScale``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cpp

    typedef struct {
      int32_t scaleLen;
      float *scaleData;
    } hbDNNQuantiScale;

量化推理结果的缩放数据，用于处理qat模型推理结果。例如量化推理结果data[i]对应的缩放数据为scale[i]，
则对应的浮点推理结果为 :math:`data[i] * scale[i]`。

+ 成员

    .. table::
      :align: center

      ==================== ==================================================
      **成员名称**          **描述**
      ==================== ==================================================
      ``scaleLen``	        缩放数据的长度。
      ``scaleData``	        缩放数据的首地址。
      ==================== ==================================================

``hbDNNQuantiType``
^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cpp

    typedef enum {
      NONE, 
      SHIFT,
      SCALE,
    } hbDNNQuantiType;

定点转浮点的反量化类型。
ptq模型为 ``NONE``，qat模型为 ``SHIFT`` 或 ``SCALE``；
``SHIFT`` 类型对应的量化参数存储在 ``hbDNNQuantiShift`` 结构体中，``SCALE`` 对应的量化参数存储在 ``hbDNNQuantiScale`` 结构体中。

+ 成员

  .. table::
    :align: center

    ==================== ==================================================
    **成员名称**              **描述**
    ==================== ==================================================
    ``NONE``	              没有量化。
    ``SHIFT``	              量化类型为 ``SHIFT``。
    ``SCALE``	              量化类型为 ``SCALE``。
    ==================== ==================================================

``hbDNNTensorProperties``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cpp

  typedef struct {
    hbDNNTensorShape validShape;
    hbDNNTensorShape alignedShape;
    int32_t tensorLayout;
    int32_t tensorType;
    hbDNNQuantiShift shift;
    hbDNNQuantiScale scale;
    hbDNNQuantiType quantiType;
  } hbDNNTensorProperties;

张量的信息。

+ 成员

  .. table::
    :align: center

    ==================== ==================================================
    **成员名称**          **描述**
    ==================== ==================================================
    ``validShape``	      张量有效内容的形状。
    ``alignedShape``	    张量对齐内容的形状。
    ``int32_t``	          张量的排布形式。
    ``int32_t``	          张量的类型。
    ``shift``	            定点转浮点的偏移量。
    ``scale``	            定点转浮点的缩放量。
    ``quantiType``	      定点转浮点的量化类型。
    ==================== ==================================================

``hbDNNTaskPriority``
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cpp

  typedef enum {
    HB_DNN_PRIORITY_LOWEST = 0,
    HB_DNN_PRIORITY_HIGHEST = 255,
    HB_DNN_PRIORITY_PREEMP = HB_DNN_PRIORITY_HIGHEST,
  } hbDNNTaskPriority;

Task优先级配置，提供默认参数。

``hbDNNTensor``
^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cpp

  typedef struct {
    hbSysMem sysMem[4];
    hbDNNTensorProperties properties;
  } hbDNNTensor;

张量。用于存放输入输出的信息。其中 ``NV12_SEPARATE`` 类型的张量需要用2个 ``hbSysMem``，其余都为1个。

+ 成员

  .. table::
    :align: center

    ==================== ==================================================
    **成员名称**           **描述**
    ==================== ==================================================
    ``sysMem``	         存放张量的内存。
    ``properties``		   张量的信息。
    ==================== ==================================================

``hbDNNRoi``
^^^^^^^^^^^^^^^^^

.. code-block:: cpp

  typedef struct {
    int32_t left;
    int32_t top;
    int32_t right;
    int32_t bottom;
  } hbDNNRoi;

矩形的感兴趣区域。:math:`W∈[left, right], H∈[top, bottom]`。

+ 成员

  .. table::
    :align: center

    ==================== ==================================================
    **成员名称**           **描述**
    ==================== ==================================================
    ``left``	            感兴趣区域左上点宽度像素点。
    ``top``	              感兴趣区域左上点高度像素点。
    ``right``	            感兴趣区域右下点宽度像素点。
    ``bottom``	          感兴趣区域右下点高度像素点。
    ==================== ==================================================

``hbDNNInferCtrlParam``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cpp

  typedef struct {
    int32_t bpuCoreId;
    int32_t dspCoreId;
    int32_t priority;
    int32_t more;
    int32_t reserved1;
    int32_t reserved2;
    int32_t reserved3;
    int32_t reserved4;
  } hbDNNInferCtrlParam;

模型推理的控制参数。
其中 ``more`` 参数用于小模型批量处理场景，当希望所有任务都执行完再获得输出时，除最后一个任务设置 ``more`` 为 ``0`` 外，
之前的任务 ``more`` 都设置为 ``1``，最多支持16个小模型的推理。

+ 成员

  .. table::
    :align: center

    ==================== ==================================================
    **成员名称**           **描述**
    ==================== ==================================================
    ``bpuCoreId``	        BPU核ID。
    ``dspCoreId``	        DSP核ID。
    ``priority``	        任务优先级。
    ``more``		          该任务后续是否有跟随任务。
    ``reserved1``	        保留字段1。
    ``Reserved2``	        保留字段2。
    ``Reserved3``	        保留字段3。
    ``Reserved4``	        保留字段4。
    ==================== ==================================================

系统类
--------

``hbBPUCore``
^^^^^^^^^^^^^^^^^^

.. code-block:: cpp

  typedef enum {
    HB_BPU_CORE_ANY = 0,
    HB_BPU_CORE_0 = (1 << 0),
    HB_BPU_CORE_1 = (1 << 1)
  } hbBPUCore;

BPU核枚举。

+ 成员

.. table::
  :align: center

  ==================== ==================================================
  **成员名称**          **描述**
  ==================== ==================================================
  ``HB_BPU_CORE_ANY``	  任意的BPU核。
  ``HB_BPU_CORE_0``	    BPU核0。
  ``HB_BPU_CORE_1``	    BPU核1。
  ==================== ==================================================

``hbDSPCore``
^^^^^^^^^^^^^^^^

.. code-block:: cpp

  typedef enum {
    HB_DSP_CORE_ANY = 0,
    HB_DSP_CORE_0 = (1 << 0),
    HB_DSP_CORE_1 = (1 << 1)
  } hbDSPCore;

DSP核枚举。

+ 成员

  .. table::
    :align: center

    ==================== ==================================================
    **成员名称**          **描述**
    ==================== ==================================================
    ``HB_DSP_CORE_ANY``	 任意的DSP核。
    ``HB_DSP_CORE_0``	   DSP核0。
    ``HB_DSP_CORE_1``	   DSP核1。
    ==================== ==================================================

``hbSysMem``
^^^^^^^^^^^^^^^^^

.. code-block:: cpp

  typedef struct {
    uint64_t phyAddr;
    void *virAddr;
    uint32_t memSize;
  } hbSysMem;

系统内存结构体，用于申请系统内存。

+ 成员

  .. table::
    :align: center

    ==================== ==================================================
    **成员名称**          **描述**
    ==================== ==================================================
    ``phyAddr``	          物理地址。
    ``virAddr``	          虚拟地址。
    ``memSize``		        内存大小。
    ==================== ==================================================

``hbSysMemFlushFlag``
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cpp

  typedef enum {
    HB_SYS_MEM_CACHE_INVALIDATE = 1,
    HB_SYS_MEM_CACHE_CLEAN = 2
  } hbSysMemFlushFlag;

系统内存与缓存同步参数。CPU与内存之间有一个缓存区，导致缓存中内容与内存中内容会出现不同步的情况，为了每次都能够拿到最新的数据，
我们需要在CPU读前、写后进行数据更新。CPU读前，将内存中数据更新到缓存中。CPU写后，将缓存中数据更新到内存中。

.. image:: ./images/hbSysMemFlushFlag.png
  :align: center

+ 成员

  .. table::
    :align: center

    +----------------------------------+---------------------------------------+
    | **成员名称**                     | **描述**                              |
    +----------------------------------+---------------------------------------+
    | ``HB_SYS_MEM_CACHE_INVALI_DATE`` | 将内存同步到缓存中，CPU读前使用。     |
    +----------------------------------+---------------------------------------+
    | ``HB_SYS_MEM_CACHE_CLEAN``       | 将缓存数据同步到内存中，CPU写后使用。 |
    +----------------------------------+---------------------------------------+

前处理类
---------

``HB_DNN_INITIALIZE_RESIZE_CTRL_PARAM``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cpp

  #define HB_DNN_INITIALIZE_RESIZE_CTRL_PARAM(param)     \
    {                                                     \
      (param)->bpuCoreId = HB_BPU_CORE_ANY;              \
      (param)->resizeType = HB_DNN_RESIZE_TYPE_BILINEAR; \
      (param)->priority = HB_DNN_PRIORITY_LOWEST;        \
      (param)->reserved1 = 0;                             \
      (param)->reserved2 = 0;                             \
      (param)->reserved3 = 0;                             \
      (param)->reserved4 = 0;                             \
    }

初始化控制参数。

``hbDNNResizeType``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cpp

  typedef enum {
    HB_DNN_RESIZE_TYPE_BILINEAR = 0,
  } hbDNNResizeType;

``Resize`` 类型。

+ 成员

  .. table::
    :align: center

    =============================== ===================================
    **成员名称**                     **描述**
    =============================== ===================================
    ``HB_DNN_RESIZE_TYPE_BILINEAR``	 Resize类型为双线性插值。
    =============================== ===================================

hbDNNResizeCtrlParam
^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cpp

  typedef struct {
    int32_t bpuCoreId;
    int32_t priority;
    hbDNNResizeType resizeType;
    int32_t reserved1;
    int32_t reserved2;
    int32_t reserved3;
    int32_t reserved4;
  } hbDNNResizeCtrlParam;

``Resize`` 的控制参数。

+ 成员

  .. table::
    :align: center

    =============================== ===================================
    **成员名称**                       **描述**
    =============================== ===================================
    ``bpuCoreId``	                     BPU核ID。
    ``priority``	                     任务优先级。
    ``resizeType``		                 Resize类型。
    ``reserved1``	                     保留字段1。
    ``Reserved2``	                     保留字段2。
    ``Reserved3``	                     保留字段3。
    ``Reserved4``	                     保留字段4。
    =============================== ===================================

插件类
---------

``hbDNNLayerCreator``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cpp

    typedef hobot::dnn::Layer *(*hbDNNLayerCreator)();

用户自定义Layer创建方法。

API接口
========

版本信息
--------------

``hbDNNGetVersion()``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cpp

    const char *hbDNNGetVersion();

获取 ``DNN`` 预测库版本信息。

+ 返回值

  - 返回版本信息。

模型加载/释放
--------------

``hbDNNInitializeFromFiles()``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cpp

    int32_t hbDNNInitializeFromFiles(hbPackedDNNHandle_t *packedDNNHandle,
                                     const char **modelFileNames,
                                     int32_t modelFileCount);

从文件完成对 ``packedDNNHandle`` 的创建和初始化。

+ 参数

  - [out] ``packedDNNHandle``  Horizon DNN句柄，指向多个模型。
  - [in]  ``modelFileNames``    模型文件的路径。
  - [in]  ``modelFileCount``    模型文件的个数。

+ 返回值

    - 返回 ``0`` 则表示API成功执行，否则执行失败。

``hbDNNInitializeFromDDR()``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cpp

    int32_t hbDNNInitializeFromDDR(hbPackedDNNHandle_t *packedDNNHandle,
                                   const void **modelData, 
                                   int32_t *modelDataLengths,
                                   int32_t modelDataCount);

从内存完成对 ``packedDNNHandle`` 的创建和初始化。

+ 参数

  - [out] ``packedDNNHandle``  Horizon DNN句柄，指向多个模型。
  - [in]  ``modelData``        模型文件的指针。
  - [in]  ``modelDataLengths``  模型数据的长度。
  - [in]  ``modelFileCount``     模型文件的个数。

+ 返回值

    - 返回 ``0`` 则表示API成功执行，否则执行失败。

``hbDNNRelease()``
^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cpp

    int32_t hbDNNRelease(hbPackedDNNHandle_t packedDNNHandle);

将 ``packedDNNHandle`` 所指向的模型释放。

+ 参数

  - [in] ``packedDNNHandle``  Horizon DNN句柄，指向多个模型。

+ 返回值

  - 返回 ``0`` 则表示API成功执行，否则执行失败。

模型信息
-----------

``hbDNNGetModelNameList()``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cpp

   int32_t hbDNNGetModelNameList(const char ***modelNameList, 
                                 int32_t *modelNameCount,
                                 hbPackedDNNHandle_t packedDNNHandle);

获取 ``packedDNNHandle`` 所指向模型的名称列表和个数。

+ 参数

  - [out] ``modelNameList``    模型名称列表。
  - [out] ``modelNameCount``   模型个数。
  - [in]  ``packedDNNHandle``  Horizon DNN句柄，指向多个模型。

+ 返回值

    - 返回 ``0`` 则表示API成功执行，否则执行失败。

``hbDNNGetModelHandle()``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cpp

    int32_t hbDNNGetModelHandle(hbDNNHandle_t *dnnHandle,
                                hbPackedDNNHandle_t packedDNNHandle,
                                const char *modelName);

从 ``packedDNNHandle`` 所指向模型列表中获取一个模型的句柄。

+ 参数

  - [out] ``dnnHandle``         DNN句柄，指向一个模型。
  - [in]  ``packedDNNHandle``   DNN句柄，指向多个模型。
  - [in]  ``modelName``         模型名称。

+ 返回值

  - 返回 ``0`` 则表示API成功执行，否则执行失败。

``hbDNNGetInputCount()``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cpp

    int32_t hbDNNGetInputCount(int32_t *inputCount, 
                               hbDNNHandle_t dnnHandle);

获取 ``dnnHandle`` 所指向模型输入张量的个数。

+ 参数

  - [out] ``inputCount``  模型输入张量的个数。
  - [in]  ``dnnHandle``   DNN句柄，指向一个模型。

+ 返回值

  - 返回 ``0`` 则表示API成功执行，否则执行失败。

``hbDNNGetOutputCount()``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cpp

    int32_t hbDNNGetOutputCount(int32_t *outputCount, 
                                hbDNNHandle_t dnnHandle);


获取 ``dnnHandle`` 所指向模型输出张量的个数。

+ 参数

    - [out] ``outputCount``  模型输出张量的个数。
    - [in]  ``dnnHandle``    DNN句柄，指向一个模型。

+ 返回值

  - 返回 ``0`` 则表示API成功执行，否则执行失败。

``hbDNNGetInputTensorProperties()``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cpp

    int32_t hbDNNGetInputTensorProperties(hbDNNTensorProperties *properties,
                                          hbDNNHandle_t dnnHandle, 
                                          int32_t inputIndex);


获取 ``dnnHandle`` 所指向模型特定输入张量的属性。

+ 参数

  - [out] ``properties``   输入张量的信息。
  - [in]  ``dnnHandle``    DNN句柄，指向一个模型。
  - [in]  ``inputIndex``   模型输入张量的编号。

+ 返回值

  - 返回 ``0`` 则表示API成功执行，否则执行失败。

``hbDNNGetOutputTensorProperties()``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cpp

    int32_t hbDNNGetOutputTensorProperties(hbDNNTensorProperties *properties,
                                           hbDNNHandle_t dnnHandle, 
                                           int32_t outputIndex);


获取 ``dnnHandle`` 所指向模型特定输出张量的属性。

+ 参数

  - [out] ``properties``    输出张量的信息。
  - [in]  ``dnnHandle``     DNN句柄，指向一个模型。
  - [in]  ``outputIndex``   模型输出张量的编号。

+ 返回值

  - 返回 ``0`` 则表示API成功执行，否则执行失败。

.. hbDNNGetInputStageCount()
.. ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. .. code-block:: cpp

..    int32_t hbDNNGetInputStageCount(int32_t *stageCount,
..                                      hbDNNHandle_t dnnHandle);

.. 获取 `dnnHandle` 所指向模型输入阶段的个数。

.. + 参数

..    - [out] `stageCount`    输入阶段的个数。
..    - [in]  `dnnHandle`     DNN句柄，指向一个模型。

.. + 返回值

..    - 返回0则表示API成功执行，否则执行失败。

.. hbDNNGetInputStageRequiredRoi()
.. ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. .. code-block:: cpp

..    int32_t hbDNNGetInputStageRequiredRoi(hbDNNRoi *roi,
..                                            hbDNNHandle_t dnnHandle,
..                                            int32_t inputIndex, int32_t stageIndex);


.. 获取 `dnnHandle` 所指向模型特定输入、特定阶段需要的roi。

.. + 参数

..    - [out] `roi`           特定输入、特定阶段需要的roi。
..    - [in]  `dnnHandle`     DNN句柄，指向一个模型。
..    - [in]  `inputIndex`    模型输入张量的编号。
..    - [in]  `stageIndex`    模型输入阶段的编号。

.. + 返回值

..    - 返回0则表示API成功执行，否则执行失败。

模型推理
----------

``hbDNNInfer()``
^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cpp

    int32_t hbDNNInfer(hbDNNTaskHandle_t *taskHandle,
                       hbDNNTensor **output,
                       const hbDNNTensor *input,
                       hbDNNHandle_t dnnHandle,
                       hbDNNInferCtrlParam *inferCtrlParam);


根据输入参数执行推理任务。

+ 参数

  - [out]     ``taskHandle``          任务句柄指针。
  - [in/out]  ``output``             推理任务的输出。
  - [in]      ``input``               推理任务的输入。
  - [in]      ``dnnHandle``           DNN句柄指针。
  - [in]      ``inferCtrlParam``      控制推理任务的参数。

+ 返回值

  - 返回 ``0`` 则表示API成功执行，否则执行失败。

``hbDNNRoiInfer()``
^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cpp

    int32_t hbDNNRoiInfer(hbDNNTaskHandle_t *taskHandle,
                          hbDNNTensor **output,
                          const hbDNNTensor *input,
                          hbDNNRoi *rois,
                          int32_t roiCount,
                          hbDNNHandle_t dnnHandle,
                          hbDNNInferCtrlParam *inferCtrlParam);

根据输入参数执行ROI推理任务。

+ 参数

  - [out]     ``taskHandle``       任务句柄指针。
  - [in/out]  ``output``           推理任务的输出。
  - [in]      ``input``            推理任务的输入。
  - [in]      ``rois``             Roi框信息。
  - [in]      ``roiCount``         Roi框数量。
  - [in]      ``dnnHandle``        dnn句柄指针。
  - [in]      ``inferCtrlParam``   控制推理任务的参数。

+ 返回值

    - 返回 ``0`` 则表示API成功执行，否则执行失败。

.. note::
  
  关于准备输入参数 ``input``：当模型输入个数为 ``input_count``，``roi`` 个数为 ``roiCount`` 时，
  第i个 ``roi`` 对应的 ``input`` 数组下标范围是[i * input_count, (i + 1) * input_count)，i=[0,roiCount);

.. hbDNNContinueTask()
.. ^^^^^^^^^^^^^^^^^^^^^^^

.. .. code-block:: cpp

..    int32_t hbDNNContinueTask(hbDNNTaskHandle_t taskHandle);

.. 继续执行任务。对于多阶段输入模型，当准备好对应roi的输入数据时，执行该接口，执行次数等于阶段数-1。

.. + 参数

..    - [in]  `taskHandle`         任务句柄指针。

.. + 返回值

..    - 返回0则表示API成功执行，否则执行失败。

``hbDNNWaitTaskDone()``
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cpp

    int32_t hbDNNWaitTaskDone(hbDNNTaskHandle_t taskHandle,
                              int32_t timeout);

等待任务完成或超时。

+ 参数

  - [in]  ``taskHandle``         任务句柄指针。
  - [in]  ``timeout``            超时配置（单位：毫秒）。

+ 返回值

  - 返回 ``0`` 则表示API成功执行，否则执行失败。

.. note::

  1. ``timeout > 0`` 表示等待时间；
  2. ``timeout <= 0`` 表示一直等待，直到任务完成。

hbDNNReleaseTask()
^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cpp

    int32_t hbDNNReleaseTask(hbDNNTaskHandle_t taskHandle);

释放任务，如已经执行则会执行完毕再release。

+ 参数

    - [in]  ``taskHandle``         任务句柄指针。

+ 返回值

  - 返回 ``0`` 则表示API成功执行，否则执行失败。

内存操作
----------

``hbSysAllocMem()``
^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cpp

    int32_t hbSysAllocMem(hbSysMem *mem, uint32_t size);

申请BPU内存。

+ 参数

  - [in]  ``size``                申请内存的大小。
  - [out] ``mem``                 内存指针。

+ 返回值

  - 返回 ``0`` 则表示API成功执行，否则执行失败。

``hbSysAllocCachedMem()``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cpp

    int32_t hbSysAllocCachedMem(hbSysMem *mem, uint32_t size);

申请缓存的BPU内存。

+ 参数

  - [in]  ``size``              申请内存的大小。
  - [out] ``mem``               内存指针。

+ 返回值

  - 返回 ``0`` 则表示API成功执行，否则执行失败。

``hbSysFlushMem()``
^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cpp

    int32_t hbSysFlushMem(hbSysMem *mem, int32_t flag);

对缓存的BPU内存进行刷新。

+ 参数

  - [in]  ``mem``               内存指针。
  - [in]  ``flag``              刷新标志符。

+ 返回值

  - 返回 ``0`` 则表示API成功执行，否则执行失败。

``hbSysFreeMem()``
^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cpp

    int32_t hbSysFreeMem(hbSysMem *mem);

释放BPU内存。

+ 参数

  - [in]  ``mem``               内存指针。

+ 返回值

  - 返回 ``0`` 则表示API成功执行，否则执行失败。

``hbSysWriteMem()``
^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cpp

    int32_t hbSysWriteMem(hbSysMem *dest, char *src, uint32_t size);

写入BPU内存。

+ 参数

  - [out] ``dest``                内存指针。
  - [in]  ``src``                 数据指针。
  - [in]  ``size``                数据大小。

+ 返回值

  - 返回 ``0`` 则表示API成功执行，否则执行失败。

``hbSysReadMem()``
^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cpp

    int32_t hbSysReadMem(char *dest, hbSysMem *src, uint32_t size);

读取BPU内存。

+ 参数

  - [out] ``dest``               数据指针。
  - [in]  ``src``                内存指针。
  - [in]  ``size``               数据大小。

+ 返回值

  - 返回 ``0`` 则表示API成功执行，否则执行失败。

前处理
----------

``hbDNNResize()``
^^^^^^^^^^^^^^^^^^^^

.. code-block:: cpp

    int32_t hbDNNResize(hbDNNTaskHandle_t *taskHandle, 
                        hbDNNTensor *output,
                        const hbDNNTensor *input, 
                        const hbDNNRoi *roi,
                        hbDNNResizeCtrlParam *resizeCtrlParam);

根据输入参数进行resize任务。

+ 参数

  - [out]  ``taskHandle``           任务句柄指针。
  - [in/out] ``output``             resize任务的输出。
  - [in]   ``input``                resize任务的输入。
  - [in]   ``roi``                  输入的roi信息。
  - [in]   ``resizeCtrlParam``      控制resize任务的参数。

+ 返回值

  - 返回 ``0`` 则表示API成功执行，否则执行失败。

.. note::

  1. 目前只支持相同 ``hbDNNDataType`` 的resize，并且必须为 ``IMG`` 类型；
  2. 对于 ``HB_DNN_IMG_TYPE_NV12``，``HB_DNN_IMG_TYPE_NV12_SEPARATE`` 类型的输入，宽和高必须为2的倍数；
  3. 缩放范围是 :math:`[1/185, 256)`；尺寸要求 :math:`H×W <= 4080×4080`，即放缩图的H最大为4080，W最大为4080；
  4. ``roi`` 必须在图像的内部。

插件
----------

``hbDNNRegisterLayerCreator()``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cpp

    int32_t hbDNNRegisterLayerCreator(const char *layerType,
                                      hbDNNLayerCreator layerCreator);

注册Layer创建方法。

+ 参数

  - [in]  ``layerType``                Layer类型。
  - [in]  ``layerCreator``             Layer创建方法。

+ 返回值

  - 返回 ``0`` 则表示API成功执行，否则执行失败。

``hbDNNUnregisterLayerCreator()``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: cpp

    int32_t hbDNNUnregisterLayerCreator(const char *layerType);

注销Layer。

+ 参数

  - [in]  ``layerType``                Layer类型。

+ 返回值

  - 返回 ``0`` 则表示API成功执行，否则执行失败。

数据排布及对齐规则
===================

数据排布
--------

硬件内部为了提高计算效率，其数据使用特殊的排布方式以使得卷积运算中同一批次乘加用到的feature map和kernel在内存中相邻排放。
下面简要介绍J5中数据排布（layout）的概念。

神经网络模型中的变量可以用一个4维的张量表示，每个数字是这个张量中的元素，我们称之为自然排布。
将不同维度的不同元素按一定规则紧密排列在一起，形成一个独立的小块（block），然后将这些小块看成新的元素，组成新的4维张量，
我们称之为带有数据排布的张量。

输入输出数据会用到不同的layout数据排布，用户可通过API获取layout描述信息，不同的layout数据不可以直接比较。
用户可自行选择用编译工具提供的API进行数据排布的转换或根据实际场景自行编写高效的数据排布转换代码。
需要注意的是，在进行数据排布转换时，如果需要padding，则padding 的值必须为零。

``NHWC_NATIVE`` 排布
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

另外还有 ``NHCW_NATIVE`` 和 ``NCHW_NATIVE`` 两种排列，他们和 ``NHWC_NATIVE`` 排布只是循环顺序不一样，
就不再单独列出了 (下文中提到的native都特指该layout) 。

数据排布如下：

.. table::
  :align: center

  +-------------+-------------+-------+
  |             |             |       |
  | N0H0W0C0    | N0H0W0C1    | ……    |
  +-------------+-------------+-------+
  |             |             |       |
  | N0H0W1C0    | N0H0W1C1    | ……    |
  +-------------+-------------+-------+
  |             |             |       |
  | ……          | ……          | ……    |
  +-------------+-------------+-------+
  |             |             |       |
  | N0H1W0C0    | N0H1W0C1    | ……    |
  +-------------+-------------+-------+
  |             |             |       |
  | ……          | ……          | ……    |
  +-------------+-------------+-------+
  |             |             |       |
  | N1H0W0C0    | N1H0W0C1    | ……    |
  +-------------+-------------+-------+
  |             |             |       |
  | ……          | ……          | ……    |
  +-------------+-------------+-------+

一个N*H*W*C大小的张量可用如下4重循环表示：

.. code-block:: cpp

    for (int32_t n = 0; n < N; n++) {
        for (int32_t h = 0; h < H; h++) {
            for (int32_t w = 0; w < W; w++) {
                for (int32_t c = 0; c < C; c++) {
                    int32_t native_offset = n*H*W*C + h*W*C + w*C + c;
                }
            }
        }
    }

BPU对齐限制规则
----------------

本节内容介绍使用BPU的对齐限制规则。

模型输入要求
^^^^^^^^^^^^^^

BPU不限制模型输入大小或者奇偶。既像YOLO这种416x416的输入可以支持，对于像SqueezeNet这种227x227的输入也可以支持。
对于NV12输入比较特别，要求HW都是偶数，是为了满足UV是Y的一半的要求。

stride要求
^^^^^^^^^^^

BPU有 ``stride`` 要求。通常可以在 ``hbDNNTensorProperties`` 中根据 ``validShape`` 和 ``alignedShape`` 来确定。
``alignedShape`` 就是 ``stride`` 对齐的要求。对于NV12或Y输入的有些特别，要求W的 ``stride`` 是16的倍数。
``padding`` 不关心具体值，可以是0或者非0。

NV12介绍
-----------

YUV格式
^^^^^^^^^

YUV格式主要用于优化彩色视频信号的传输。
YUV分为三个分量：Y表示明亮度，也就是灰度值；而U和V表示的则是色度，作用是描述影像色彩及饱和度，用于指定像素的颜色。

NV12排布
^^^^^^^^^^

NV12图像格式属于YUV颜色空间中的YUV420SP格式，每四个Y分量共用一组U分量和V分量，Y连续排序，U与V交叉排序。

排列方式如下：

.. table::
  :align: center

  +-----+-----+-----+-----+
  |     |     |     |     |
  |  YY |  YY |  YY |  YY |
  +-----+-----+-----+-----+
  |     |     |     |     |
  |  YY |  YY |  YY |  YY |
  +-----+-----+-----+-----+
  |     |     |     |     |
  |  YY |  YY |  YY |  YY |
  +-----+-----+-----+-----+
  |     |     |     |     |
  |  YY |  YY |  YY |  YY |
  +-----+-----+-----+-----+
  |     |     |     |     |
  |  UV |  UV |  UV |  UV |
  +-----+-----+-----+-----+
  |     |     |     |     |
  |  UV |  UV |  UV |  UV |
  +-----+-----+-----+-----+

错误码
=======

.. code-block:: bash

    HB_DNN_SUCCESS = 0                   // 执行成功
    HB_DNN_INVALID_ARGUMENT              // 非法参数
    HB_DNN_INVALID_MODEL                 // 非法模型
    HB_DNN_MODEL_NUMBER_EXCEED_LIMIT     // 模型个数超过限制
    HB_DNN_INVALID_PACKED_DNN_HANDLE     // 非法packed handle
    HB_DNN_INVALID_DNN_HANDLE            // 非法handle
    HB_DNN_CAN_NOT_OPEN_FILE             // 文件不存在
    HB_DNN_OUT_OF_MEMORY                 // 没有足够的内存
    HB_DNN_TIMEOUT                       // 超时
    HB_DNN_TASK_NUM_EXCEED_LIMIT         // 任务数量超限制
    HB_DNN_TASK_BATCH_SIZE_EXCEED_LIMIT  // 多任务处理数量超限制
    HB_DNN_INVALID_TASK_HANDLE           // 非法task handle
    HB_DNN_RUN_TASK_FAILED               // 任务执行失败
    HB_DNN_MODEL_IS_RUNNING              // 任务执行中
    HB_DNN_INCOMPATIBLE_MODEL            // 不兼容的模型

    HB_SYS_SUCCESS                       // 执行成功
    HB_SYS_INVALID_ARGUMENT              // 非法参数
    HB_SYS_OUT_OF_MEMORY                 // 没有足够的内存

配置信息
==========

可通过 ``export HB_DNN_LOG_LEVEL`` 来对DNN的输出 ``log`` 等级进行控制。

枚举值意义介绍：

+ ``0(HB_DNN_LOG_NONE)``: 无日志输出；
+ ``1(HB_DNN_LOG_DEBUG)``: ``debug`` 类型日志输出；
+ ``2(HB_DNN_LOG_INFO)``: ``info`` 类型日志输出；
+ ``3(HB_DNN_LOG_WARNING)``: ``warning`` 类型日志输出。
+ ``4(HB_DNN_LOG_ERROR)``: ``error`` 类型日志输出。
+ ``5(HB_DNN_LOG_FATAL)``: ``fatal`` 类型日志输出。

